# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release --no-restore

    - name: Test
      run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory coverage

    - name: ReportGenerator
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.17
      with:
        reports: 'coverage/*/coverage.cobertura.xml' # REQUIRED # The coverage reports that should be parsed (separated by semicolon). Globbing is supported.
        targetdir: 'coveragereport' # REQUIRED # The directory where the generated report should be saved.
        reporttypes: 'HtmlInline;Cobertura' # The output formats and scope (separated by semicolon)

    - name: Upload Test Report Artifact
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coveragereport/Cobertura.xml

  test:
    name: Test Summary
    needs: [build]

    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
    - name: Download Test Report Artifact
      uses: actions/download-artifact@v3
      with:
        name: coverage-report

    - name: Generate Test Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: Cobertura.xml
        badge: true
        format: 'markdown'
        output: 'both'

    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2.5.0
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

    - name: Write to Job Summary
      run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

    - name: Get Coverage For Badge
      run: |
          # Extract the code coverage summary percentage
          COVERAGE="$(grep Summary code-coverage-results.md | cut -d '|' -f 2 | cut -d ' ' -f 2 | cut -d '%' -f 1 | tr -d '*')"

          # Add the coverage to an environment variable
          echo "COVERAGE=$(echo ${COVERAGE})" >> $GITHUB_ENV
          echo "COVERAGE=${COVERAGE}"

          REF=${{ github.ref }}
          echo "github.ref: $REF"

          IFS='/' read -ra PATHS <<< "$REF"
          BRANCH_NAME="${PATHS[1]}_${PATHS[2]}"
          echo $BRANCH_NAME
          echo "BRANCH=$(echo ${BRANCH_NAME})" >> $GITHUB_ENV

    - name: Create Badge
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: bb279656e71f063d8ce524d12ac2389a
        filename: past__${{ env.BRANCH }}.json
        label: Code Coverage
        message: ${{ env.COVERAGE }}%
        namedlogo: dotnet
        valColorRange: ${{ env.COVERAGE }}
        minColorRange: 75
        maxColorRange: 95
